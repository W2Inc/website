---
import BaseHead from "../../components/BaseHead.astro";
import Footer from "../../components/Footer.astro";
import Header from "../../components/Header.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
---

<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main>
      <div class="h-screen w-screen" id="container"></div>
    </main>
    <Footer />
  </body>
</html>

<script>
  import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";

  export default class Sketch {
    private container: any;
    private camera: any;
    private scene: any;
    private geometry: any;
    private material: any;
    private mesh: any;
    private renderer: any;
    private width: number;
    private time: number;
    private height: number;

    constructor(options: any) {
      this.container = options.domElement;
      this.width = this.container.offsetWidth;
      this.height = this.container.offsetHeight;

      this.camera = new THREE.PerspectiveCamera(
        70,
        this.width / this.height,
        0.01,
        10
      );
      this.camera.position.z = 1;

      this.scene = new THREE.Scene();

      this.renderer = new THREE.WebGLRenderer({ antialias: true });
      // this.renderer.setPixelRatio(window.devicePixelRatio)
      this.renderer.setPixelRatio(2);

      this.container.appendChild(this.renderer.domElement);
      new OrbitControls(this.camera, this.renderer.domElement);

      this.time = 0;
      this.resize();
      this.addObjects();
      this.render();

      this.setupResize();
    }

    resize() {
      this.width = this.container.offsetWidth;
      this.height = this.container.offsetHeight;
      this.renderer.setSize(this.width, this.height);
      this.camera.aspect = this.width / this.height;
      this.camera.updateProjectionMatrix();
    }

    setupResize() {
      window.addEventListener("resize", this.resize.bind(this));
    }

    addObjects() {
      this.geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);
      this.material = new THREE.MeshNormalMaterial();

      this.mesh = new THREE.Mesh(this.geometry, this.material);
      this.scene.add(this.mesh);
    }

    render() {
      this.time += 0.05;
      this.mesh.rotation.x = this.time / 2000;
      this.mesh.rotation.y = this.time / 1000;

      this.renderer.render(this.scene, this.camera);
      // console.log(this.time)
      requestAnimationFrame(this.render.bind(this));
    }
  }

  new Sketch({
    domElement: document.getElementById("container"),
  });
</script>
